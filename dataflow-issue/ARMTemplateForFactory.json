{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "dataflow-issue"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"AzureBlobStorage2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage2'"
		},
		"AzureDataLakeStorage_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage'"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'"
		},
		"RecruitRestService_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'RecruitRestService'"
		},
		"RestService1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'RestService1'"
		},
		"AzureDataLakeStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://sgdatalake.dfs.core.windows.net"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://sgdatalake.dfs.core.windows.net"
		},
		"RecruitRestService_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://azure.microsoft.com"
		},
		"RecruitRestService_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "soraia.graca@microsoft.com"
		},
		"RestService1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://ms.portal.azure.com/"
		},
		"RestService1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "soraia.graca@microsoft.com"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy datatest1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['CATALOG']['CD'][0]['TITLE']"
										},
										"sink": {
											"name": "Title",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['CATALOG']['CD'][0]['ARTIST']"
										},
										"sink": {
											"name": "Artist",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['CATALOG']['CD'][0]['COUNTRY']"
										},
										"sink": {
											"name": "Country",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['CATALOG']['CD'][0]['COMPANY']"
										},
										"sink": {
											"name": "Company",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['CATALOG']['CD'][0]['PRICE']"
										},
										"sink": {
											"name": "Price",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"path": "$['CATALOG']['CD'][0]['YEAR']"
										},
										"sink": {
											"name": "Year",
											"type": "Int32"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-05-20T13:06:39Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-05-20T09:27:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "repro"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "CD"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Alumni Company Reviews.txt",
						"container": "source"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"surveys": {
							"type": "object",
							"properties": {
								"survey": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"censored": {
												"type": "object",
												"properties": {
													"@type": {
														"type": "string"
													},
													"_value_": {
														"type": "boolean"
													}
												}
											},
											"comments": {
												"type": "object",
												"properties": {
													"@nil": {
														"type": "boolean"
													}
												}
											},
											"completed-at": {
												"type": "object",
												"properties": {
													"@type": {
														"type": "string"
													},
													"_value_": {
														"type": "string"
													}
												}
											},
											"flagged-for-follow-up": {
												"type": "object",
												"properties": {
													"@type": {
														"type": "string"
													},
													"_value_": {
														"type": "boolean"
													}
												}
											},
											"has-notes": {
												"type": "object",
												"properties": {
													"@type": {
														"type": "string"
													},
													"_value_": {
														"type": "boolean"
													}
												}
											},
											"invited-at": {
												"type": "object",
												"properties": {
													"@type": {
														"type": "string"
													},
													"_value_": {
														"type": "string"
													}
												}
											},
											"net-promoter-label": {
												"type": "string"
											},
											"organization-id": {
												"type": "object",
												"properties": {
													"@type": {
														"type": "string"
													},
													"_value_": {
														"type": "integer"
													}
												}
											},
											"public-response": {
												"type": "object",
												"properties": {
													"@nil": {
														"type": "boolean"
													}
												}
											},
											"recommendation-likelihood": {
												"type": "object",
												"properties": {
													"@type": {
														"type": "string"
													},
													"_value_": {
														"type": "integer"
													}
												}
											},
											"updated-at": {
												"type": "object",
												"properties": {
													"@type": {
														"type": "string"
													},
													"_value_": {
														"type": "string"
													}
												}
											},
											"unique-id": {
												"type": "object",
												"properties": {
													"@type": {
														"type": "string"
													},
													"_value_": {
														"type": "integer"
													}
												}
											},
											"job-reference": {
												"type": "string"
											},
											"organization-reference": {
												"type": "string"
											},
											"customer-reference": {
												"type": "integer"
											},
											"customer-full-name": {
												"type": "string"
											},
											"customer-work-email": {
												"type": "string"
											},
											"customer-work-city": {
												"type": "object",
												"properties": {
													"@nil": {
														"type": "boolean"
													}
												}
											},
											"customer-work-region": {
												"type": "string"
											},
											"organization-name": {
												"type": "string"
											},
											"public-reviewer-name": {
												"type": "string"
											},
											"public-display-comments": {
												"type": "null"
											},
											"public-display-customer-location": {
												"type": "string"
											},
											"notes": {
												"type": "object",
												"properties": {
													"@type": {
														"type": "string"
													}
												}
											}
										}
									}
								},
								"@type": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestResource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Connection to your REST/HTTP",
				"linkedServiceName": {
					"referenceName": "RestService1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestService1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SinkDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Connection to your Azure Data Lake Store",
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string"
					},
					"Directory": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().Directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage2_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RecruitRestService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RecruitRestService_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('RecruitRestService_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('RecruitRestService_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestService1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestService1_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('RestService1_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('RestService1_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json1",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          surveys as ({@type} as string, survey as (censored as ({@type} as string, {_value_} as boolean), comments as string, {completed-at} as ({@type} as string, {_value_} as string), {customer-full-name} as string, {customer-reference} as integer, {customer-work-city} as string, {customer-work-email} as string, {customer-work-region} as string, {flagged-for-follow-up} as ({@type} as string, {_value_} as boolean), {has-notes} as ({@type} as string, {_value_} as boolean), {invited-at} as ({@type} as string, {_value_} as string), {job-reference} as string, {net-promoter-label} as string, notes as ({@type} as string, note as ({@type} as string, {author-name} as string, body as string, {communication-type} as string, {created-at} as ({@type} as string, {_value_} as string))[]), {organization-id} as ({@type} as string, {_value_} as long), {organization-name} as string, {organization-reference} as string, {public-display-comments} as string, {public-display-customer-location} as string, {public-response} as ({@nil} as boolean), {public-reviewer-name} as string, {recommendation-likelihood} as ({@type} as string, {_value_} as short), {unique-id} as ({@type} as string, {_value_} as long), {updated-at} as ({@type} as string, {_value_} as string))[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> source1",
						"source1 foldDown(unroll(surveys.survey, surveys.survey),",
						"     mapColumn(",
						"          {author-name} = surveys.survey.notes.note.{author-name},",
						"          body = surveys.survey.notes.note.body,",
						"          {communication-type} = surveys.survey.notes.note.{communication-type},",
						"          {created-at} = surveys.survey.censored.{_value_}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     partitionBy('hash', 1),",
						"     preCommands: [],",
						"     postCommands: []) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json1')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]"
			]
		}
	]
}